# -*- coding: utf-8 -*-
"""NLP_Assignment_7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YJsHaQC55fVZuItz6udpYU68YAPwxrye
"""

import random
from collections import defaultdict

# Step 1: Tokenize the input text
def tokenize(text):
    return text.lower().split()

# Step 2: Create an N-gram model (Bigram in this case)
def create_bigram_model(corpus):
    bigram_model = defaultdict(list)
    for sentence in corpus:
        tokens = tokenize(sentence)
        for i in range(len(tokens)-1):
            bigram_model[tokens[i]].append(tokens[i+1])
    return bigram_model

# Step 3: Generate auto-completion for a given input phrase
def autocomplete(bigram_model, input_phrase, max_completions=5):
    tokens = tokenize(input_phrase)
    last_word = tokens[-1]  # Get the last word in the input
    if last_word in bigram_model:
        possible_words = bigram_model[last_word]
        # Randomly sample from the next word predictions
        return random.sample(possible_words, min(len(possible_words), max_completions))
    else:
        return ["No completions available"]

# Sample corpus
corpus = [
    "I love programming in Python",
    "Python is a great programming language",
    "I enjoy learning new programming languages",
    "Programming is fun"
]

# Step 4: Create the bigram model
bigram_model = create_bigram_model(corpus)

# Step 5: Test the autocomplete function
input_phrase = "I love"
completions = autocomplete(bigram_model, input_phrase)
print(f"Auto-completions for '{input_phrase}': {completions}")

